#!/usr/bin/env bash

#
# Poor man's 'vagrant sshfs'
#

vagrant-machines() {
    vagrant global-status | awk 'BEGIN { show = 1 } NF == 0 { show = 0; next } { if (show) print $0 }'
}

if [[ $# -ne 1 ]] && [[ $# -ne 2 ]]; then
    echo "usage: $(basename $0) <MACHINE_ID:REMOTE_DIR> [LOCAL_DIR]"
    vagrant-machines
    exit 1
fi

MACHINE_ID=${1%%:*}
REMOTE_DIR=${1#*:}
LOCAL_DIR=${2:-$(mktemp -d)}

if [[ ${DEBUG} == "1" ]]; then
    echo "MACHINE_ID: ${MACHINE_ID}"
    echo "REMOTE_DIR: ${REMOTE_DIR}"
    echo "LOCAL_DIR : ${LOCAL_DIR}"
    DEVICE=/dev/stderr
else
    DEVICE=/dev/null
fi

TMP=$(mktemp)
vagrant ssh-config ${MACHINE_ID} >& ${TMP}
if [[ $? -ne 0 ]]; then
    echo "Machine ID is NOT valid"
    vagrant-machines
    rm -f ${TMP}
    exit 2
fi

cat ${TMP} | awk "
    /HostName /     { host = \$2 }
    /Port /         { port = \$2 }
    /User /         { user = \$2 }
    /IdentityFile / { id   = \$2 }
    END             { printf(\"sshfs -o'Port=%s' -o'IdentityFile=%s' %s@%s:${REMOTE_DIR} ${LOCAL_DIR}\n\", port, id, user, host) }
" | tee ${DEVICE} | bash

if [[ $? -ne 0 ]]; then
    rm -f ${TMP}
    exit 3
fi
rm -f ${TMP}

LOCAL_ABS_DIR=$(realpath ${LOCAL_DIR})
echo "Remote '${REMOTE_DIR}' is mounted to '${LOCAL_ABS_DIR}'"
echo "To exit and unmount, run: $ exit"
echo "To manually unmount, run: $ fusermount -u ${LOCAL_ABS_DIR}"

pushd ${LOCAL_DIR} > /dev/null; bash -i; popd > /dev/null
fusermount -u ${LOCAL_ABS_DIR}
