#!/bin/bash -e

if [[ $# -lt 1 ]] ; then
    echo "[R]emote [ERL]ang node helper"
    echo "Usage: $(basename $0) <NAME@HOST> [<ping> | cookie | remsh | entop | observer | call <MFA> | eval <EXPR> | load <BEAM> | redbug <TRACE> [TIME [MSGS [PROC]]]]"
    echo "Where:"
    echo "  ping     - Start local node and ping remote node (default)"
    echo "  cookie   - Print remote node's cookie"
    echo "  remsh    - Connect to remote node"
    echo "  entop    - Connect entop to remote node"
    echo "  observer - Ping remote node and start observer"
    echo "  call     - Make RPC call. MFA must be \"Module, Function, [Args]\""
    echo "  eval     - Eval EXPR on remote node"
    echo "  load     - Load BEAM to remote node"
    echo "  redbug   - Trace on remote node"
    exit 1
fi

node=$1
cmd=${2-ping}

host=$(echo $node | awk -F@ '{print $2}')
case $host in
10.*)
    name="-name adm$$@127.0.0.1"
    cookie=$(ssh $host 'cat ~/.erlang.cookie')
    ;;
127.0.0.*)
    name="-name adm$$@127.0.0.1"
    cookie=$(cat ~/.erlang.cookie)
    ;;
$(hostname))
    name="-sname adm$$"
    cookie=$(cat ~/.erlang.cookie)
    ;;
*)
    echo "Unknown host: $host"
    exit 1
esac

function rpc_call() {
    local node=$1
    local name=$2
    local cookie=$3
    local mfa=$4
    erl $name -hidden -noshell -setcookie $cookie -eval "io:format(\"~p~n\", [rpc:call('$node', $mfa)]), init:stop()."
}

function eval_call() {
    local node=$1
    local name=$2
    local cookie=$3
    local expr=$4
    erl $name -hidden -noshell -setcookie $cookie -eval "{ok, Ts, _} = erl_scan:string(\"$expr\"), {ok, Fs} = erl_parse:parse_exprs(Ts), {value, V, _} = rpc:call('$node', erl_eval, exprs, [Fs, []]), io:format(\"~p~n\", [V]), init:stop()."
}

case $cmd in
cookie)
    echo $cookie
    ;;
ping)
    echo "Exit with double Ctrl-C"
    erl $name -setcookie $cookie -eval "net_adm:ping('$node')."
    ;;
remsh)
    echo "Exit with double Ctrl-C"
    erl $name -hidden -setcookie $cookie -remsh $node
    ;;
entop)
    entop $node $name -setcookie $cookie
    ;;
call)
   mfa=${3-"erlang,node,[]"}
   rpc_call "$node" "$name" "$cookie" "$mfa"
   ;;
eval)
   expr=${3-"erlang:node()."}
   eval_call "$node" "$name" "$cookie" "$expr"
   ;;
load)
   if [[ $3 ]]; then
       beam=${3}
       module=$(basename ${beam%.*})
       path=$(rpc_call "$node" "$name" "$cookie" "code,which,['$module']")
       case $host in
       10.*)
           ssh $host "tee $path >/dev/null" <$beam || exit 1
       ;;
       127.0.0.1)
           tee $path >/dev/null <$beam
       ;;
       $(hostname))
           tee $path >/dev/null <$beam
       ;;
       esac
       rpc_call "$node" "$name" "$cookie" "c,l,['$module']"
   else
       echo "BEAM param expected"
       exit 1
   fi
   ;;
redbug)
   echo "Exit with double Ctrl-C"
   redbug -setcookie $cookie $name $node $3 $4 $5 $6
   ;;
observer)
   erl $name -noshell -setcookie $cookie -eval "pong = net_adm:ping('$node'), observer:start(), {ok, Ns} = net_adm:names(), Id = (catch lists:foldl(fun ('$node', Idx) -> throw(Idx); (_, Idx) -> 1 + Idx end, 1001, lists:usort([list_to_atom(N) || {N, _} <- Ns] ++ nodes()))), observer ! {wx,Id,ign,ing,{wxCommand,command_menu_selected,ign,ign,ign}}, Wait = fun W() -> case whereis(observer) of Pid when is_pid(Pid) -> timer:sleep(500), W(); _ -> stop end end, Wait(), init:stop()."
    ;;
*)
    echo "Unknown command: $cmd"
    exit 1
esac
