(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-11"))
(set-scroll-bar-mode nil) ; nil | 'left | 'right
(tool-bar-mode -1) ; neg - disable | pos - enable
(menu-bar-mode t) ; nil | t
; turn off splash screen
(setq inhibit-splash-screen t)
; start with an empty buffer
(switch-to-buffer (get-buffer-create "Empty"))
;(delete-other-windows)
(setq line-number-mode t)
(setq column-number-mode t)
; make all "yes or no" prompts show "y or n" instead
(fset 'yes-or-no-p 'y-or-n-p)
(setq show-trailing-whitespace t)
(show-paren-mode t)
;(setq show-paren-style 'expression)

; don't delete trailing whitespaces
; https://stackoverflow.com/questions/50258565/git-editing-hunks-fails-when-file-has-other-hunks
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(setq ediff-split-window-function 'split-window-horizontally)
(delete-selection-mode 1) ; neg - disable | pos - enable
(set-face-attribute 'region nil :background "lightgray")
(setq make-backup-files nil)
; enable inter-program clipboard
(setq x-select-enable-clipboard t)
; set tab to be the spaces
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

; follow symbolic link to version-controlled source file
(setq vc-follow-symlinks t)

(global-set-key [?\M-p] 'beginning-of-buffer)    ; M-<
(global-set-key [?\M-n] 'end-of-buffer)          ; M->

(global-set-key "\C-h" 'delete-backward-char)
(global-set-key "\M-h" 'backward-kill-word)

(global-set-key "\C-xr" 'replace-string)
(global-set-key "\M-\C-xr" 'replace-regexp)

(global-set-key "\C-x\C-g" 'find-grep)

;;; disable suspend-frame combinations
(global-set-key "\C-z" nil)
(global-set-key "\C-x\C-z" nil)

; check out 'bury-buffer
(global-set-key (kbd "<C-tab>") 'other-window)

;;;----------------------------------------
;;; Mimic shortcuts for Russian layout
;;; Use vector for non-ASCII characters
;;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html
;;; Yes, I know about `M-x set-input-method'
;;;----------------------------------------

(global-set-key [?\C-ф] 'move-beginning-of-line) ; C-a
(global-set-key [?\C-у] 'move-end-of-line)       ; C-e
(global-set-key [?\C-з] 'previous-line)          ; C-p
(global-set-key [?\C-т] 'next-line)              ; C-n
(global-set-key [?\M-з] 'beginning-of-buffer)    ; M-< | M-p
(global-set-key [?\M-т] 'end-of-buffer)          ; M-> | M-n
(global-set-key [?\C-д] 'recenter-top-bottom)    ; C-l
(global-set-key [?\C-м] 'scroll-up-command)      ; C-v
(global-set-key [?\M-м] 'scroll-down-command)    ; M-v

(global-set-key [?\C-а] 'forward-char)           ; C-f
(global-set-key [?\C-и] 'backward-char)          ; C-b
(global-set-key [?\M-а] 'forward-word)           ; M-f
(global-set-key [?\M-и] 'backward-word)          ; M-b

(global-set-key [?\C-ы] 'isearch-forward)        ; C-s
(global-set-key [?\C-к] 'isearch-backward)       ; C-r

(global-set-key [?\C-щ] 'open-line)              ; C-o
(global-set-key [?\C-п] 'keyboard-quit)          ; C-g

(global-set-key [?\C-в] 'delete-char)            ; C-d
(global-set-key [?\M-в] 'kill-word)              ; M-d
(global-set-key [?\C-л] 'kill-line)              ; C-k
(global-set-key [?\M-л] 'kill-sentence)          ; M-k
(global-set-key [?\C-р] 'delete-backward-char)   ; <backspace> | C-h
(global-set-key [?\M-р] 'backward-kill-word)     ; M-h

(global-set-key [?\C-н] 'yank)                   ; C-y
(global-set-key [?\M-н] 'yank-pop)               ; M-y
(global-set-key [?\C-ц] 'kill-region)            ; C-w
(global-set-key [?\M-ц] 'kill-ring-save)         ; M-y

(global-set-key [?\M-г] 'upcase-word)            ; M-u
(global-set-key [?\M-д] 'downcase-word)          ; M-l

; Mimic C-x
(define-prefix-command 'ctl-x-ru-map)
(global-set-key [?\C-ч] 'ctl-x-ru-map)                 ; C-x

(define-key 'ctl-x-ru-map [?щ] 'other-window)          ; C-x o
(define-key 'ctl-x-ru-map [?0] 'delete-window)         ; C-x 0
(define-key 'ctl-x-ru-map [?2] 'split-window-below)    ; C-x 2
(define-key 'ctl-x-ru-map [?3] 'split-window-right)    ; C-x 3

(define-key 'ctl-x-ru-map [?\C-а] 'ido-find-file)      ; C-x C-f
(define-key 'ctl-x-ru-map [?\C-ы] 'save-buffer)        ; C-x C-s
(define-key 'ctl-x-ru-map [?\C-с] 'ask-before-closing) ; C-x C-c

;;;
;;;
;;;


(setq compile-command "make")

;;; make the new script executable after writing.
;(add-hook 'after-save-hook
;  'executable-make-buffer-file-executable-if-script-p)

;;;----------------------------------------
;;; fast completion modes
;;;----------------------------------------

; after you press M-x, available completions are listed as you type.
(icomplete-mode t)

;; do not confirm a new file or buffer
(setq confirm-nonexistent-file-or-buffer nil)

(require 'ido)
(ido-mode 1)
(ido-everywhere 1)
(setq ido-enable-flex-matching t) ; fuzzy matching is a must have
(setq ido-create-new-buffer 'always)
(setq ido-enable-tramp-completion nil)
(setq ido-enable-last-directory-history nil)
(setq ido-auto-merge-work-directories-length nil)
(setq ido-confirm-unique-completion nil) ;; wait for RET, even for unique?
(setq ido-show-dot-for-dired t) ;; put . as the first item
(setq ido-use-filename-at-point nil)

;;;----------------------------------------
;;; package
;;;----------------------------------------

; Emacs: How to Install Packages Using ELPA, MELPA
; http://ergoemacs.org/emacs/emacs_package_system.html

; Update index : M-x package-refresh-contents
; List packages: M-x list-packages

(require 'package)
(add-to-list 'package-archives
             '("MELPA Stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

;;;----------------------------------------
;;; https://github.com/purcell/exec-path-from-shell
;;;----------------------------------------

(unless (package-installed-p 'exec-path-from-shell)
  (package-install 'exec-path-from-shell))
(require 'exec-path-from-shell)
(exec-path-from-shell-initialize)

;;;----------------------------------------
;;; flycheck
;;;----------------------------------------

(unless (package-installed-p 'flycheck)
  (package-install 'flycheck))

(require 'flycheck)
;;(add-hook 'after-init-hook #'global-flycheck-mode)

(add-hook 'python-mode-hook 'flycheck-mode)
(add-hook 'web-mode-hook 'flycheck-mode)

(add-hook 'c++-mode-hook
  (lambda ()
    ; https://www.flycheck.org/en/latest/languages.html#c-c
    (setq flycheck-cppcheck-standards '("{{cpp_std}}"))
    (setq flycheck-clang-language-standard "{{cpp_std}}")
    (setq flycheck-gcc-language-standard "{{cpp_std}}")
    ; Shortcuts for C-c !{d,n,p}
    (local-set-key "\C-cd" 'flycheck-explain-error-at-point)
    (local-set-key "\C-cn" 'flycheck-next-error)
    (local-set-key "\C-cp" 'flycheck-previous-error)
))
(add-hook 'c++-mode-hook 'flycheck-mode)

;;;----------------------------------------
;;; extra packages path
;;;----------------------------------------

(add-to-list 'load-path "~/emacs/lib/elisp/")

;;;----------------------------------------
;;; emacs-lisp-mode
;;;----------------------------------------

(add-to-list 'auto-mode-alist '("emacs"  . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '(".emacs" . emacs-lisp-mode))

;;;----------------------------------------
;;; groovy-mode
;;;----------------------------------------

(autoload 'groovy-mode "groovy-mode" "Major mode for editing Groovy code." t)
(add-to-list 'auto-mode-alist '("\\.groovy\\'" . groovy-mode))
(add-to-list 'auto-mode-alist '("Jenkinsfile"  . groovy-mode))

;;;----------------------------------------
;;; dired mode
;;;----------------------------------------

(add-hook 'dired-mode-hook
    '(lambda ()
       ; C-c C-c or C-x C-s (wdired-finish-edit)
       ; C-c ESC (wdired-abort_changes)
       (local-set-key "\C-c\C-q" 'wdired-change-to-wdired-mode)
))

;;;----------------------------------------
;;; erlang-mode
;;;----------------------------------------

(setq erlang-root-dir "~/.kerl/installations/{{erl_ver}}")
(setq load-path (cons (car (file-expand-wildcards (concat erlang-root-dir "/lib/tools-*/emacs"))) load-path))
(setq erlang-electric-commands nil)
(require 'erlang-start)

(add-hook 'erlang-mode-hook
  '(lambda ()
     (setq tab-width 4)
     (setq tab-stop-list
        '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80))
     (setq indent-tabs-mode nil)
     (setq indent-line-function 'insert-tab)

     (imenu-add-to-menubar "Imenu")

     (local-set-key "\C-cm" 'erlang-man-module)
     (local-set-key "\C-cf" 'erlang-man-function)

     (if (not tags-table-list)
         (setq tags-table-list '("~/.emacs.d")))

     ; M-. find tag
     ; M-0 M-. find next tag
     ; C-u M-. find next tag
     ; M-* pop back
     ; M-x visit-tags-table
     ; M-x tags-search
     ; tags-file-name
     ; tags-table-list
))

; define name and cookie for internally loaded erlang shell.
(setq inferior-erlang-machine-options
      '("-name" "emacs@127.0.0.1" "-setcookie" "emacs" "-pa" "../ebin"))

; define auto erlang mode for these files/extensions.
(add-to-list 'auto-mode-alist '(".*\\.app\\'"     . erlang-mode))
(add-to-list 'auto-mode-alist '(".*app\\.src\\'"  . erlang-mode))
(add-to-list 'auto-mode-alist '(".*\\.config\\'"  . erlang-mode))
(add-to-list 'auto-mode-alist '(".*\\.rel\\'"     . erlang-mode))
(add-to-list 'auto-mode-alist '(".*\\.script\\'"  . erlang-mode))
(add-to-list 'auto-mode-alist '(".*\\.escript\\'" . erlang-mode))
(add-to-list 'auto-mode-alist '(".*\\.es\\'"      . erlang-mode))
(add-to-list 'auto-mode-alist '(".*\\.xrl\\'"     . erlang-mode))
(add-to-list 'auto-mode-alist '(".*\\.yrl\\'"     . erlang-mode))

; add include directory to default compile path.
(defvar erlang-compile-extra-opts
  '(bin_opt_info debug_info (d . \'TEST\') (i . "../include") (i . "../deps") (i . "../deps/*/ebin") (i . "../../") (i . "../../../deps")))

; define where put beam files.
(setq erlang-compile-outdir "../ebin")

;;;----------------------------------------
;;; elixir-mode
;;;----------------------------------------

(unless (package-installed-p 'elixir-mode)
  (package-install 'elixir-mode))
(require 'elixir-mode)

;(unless (package-installed-p 'flycheck-mix)
;  (package-install 'flycheck-mix))
;(require 'flycheck-mix)
;(flycheck-mix-setup)

(add-hook 'elixir-mode-hook 'flycheck-mode)

;;;----------------------------------------
;;; rust-mode
;;;----------------------------------------

;(unless (package-installed-p 'rust-mode)
;  (package-install 'rust-mode))

;(require 'rust-mode)
;(add-hook 'rust-mode-hook
;          (lambda () (setq indent-tabs-mode nil)))
;(setq rust-format-on-save t)

;;;----------------------------------------
;;; asm-mode
;;;----------------------------------------

(unless (package-installed-p 'asm-mode)
  (package-install 'asm-mode))

(require 'asm-mode)
(add-hook 'asm-mode-hook
          (lambda ()
            (setq tab-width 4)
            (setq tab-stop-list
                  '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80))
            (setq indent-tabs-mode nil)
            (setq indent-line-function 'insert-tab)

            ;; disable confusiong colon behavior)
            (advice-add #'asm-colon :override #'self-insert-command)
            ;; disable confusing semicolon behavior
            (advice-add #'asm-comment :override #'self-insert-command)
            ;; don't insert tab on insert line above
            (local-set-key "\C-o" 'split-line)
            )
          )

;;;----------------------------------------
;;; flymake
;;;----------------------------------------

(require 'flymake)
(require 'flymake-cursor) ; http://www.emacswiki.org/emacs/FlymakeCursor
(setq flymake-log-level 3)

; Trigger flymake only when the buffer is saved
(setq flymake-no-changes-timeout nil)

;;;----------------------------------------
;;; flymake syntaxerl
;;;----------------------------------------

(defun flymake-compile-script-path (path)
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
                     'flymake-create-temp-inplace))
         (local-file (file-relative-name
                      temp-file
                      (file-name-directory buffer-file-name))))
    (list path (list local-file))))

(defun flymake-syntaxerl ()
  (flymake-compile-script-path "~/bin/syntaxerl"))

(add-hook 'erlang-mode-hook
  '(lambda ()
     (local-set-key "\C-cd" 'flymake-display-err-menu-for-current-line)
     (local-set-key "\C-cn" 'flymake-goto-next-error)
     (local-set-key "\C-cp" 'flymake-goto-prev-error)

     (add-to-list 'flymake-allowed-file-name-masks '("\\.erl\\'"     flymake-syntaxerl))
     (add-to-list 'flymake-allowed-file-name-masks '("\\.hrl\\'"     flymake-syntaxerl))
     (add-to-list 'flymake-allowed-file-name-masks '("\\.xrl\\'"     flymake-syntaxerl))
     (add-to-list 'flymake-allowed-file-name-masks '("\\.yrl\\'"     flymake-syntaxerl))
     (add-to-list 'flymake-allowed-file-name-masks '("\\.app\\'"     flymake-syntaxerl))
     (add-to-list 'flymake-allowed-file-name-masks '("\\.app.src\\'" flymake-syntaxerl))
     (add-to-list 'flymake-allowed-file-name-masks '("\\.config\\'"  flymake-syntaxerl))
     (add-to-list 'flymake-allowed-file-name-masks '("\\.rel\\'"     flymake-syntaxerl))
     (add-to-list 'flymake-allowed-file-name-masks '("\\.script\\'"  flymake-syntaxerl))
     (add-to-list 'flymake-allowed-file-name-masks '("\\.escript\\'" flymake-syntaxerl))
     (add-to-list 'flymake-allowed-file-name-masks '("\\.es\\'"      flymake-syntaxerl))

     ;; should be the last.
     (flymake-mode 1)
))

;;;----------------------------------------
;;; flymake-jslint
;;;----------------------------------------

;(require 'flymake-jslint)
;(setq flymake-jslint-args ())
;(add-hook 'js-mode-hook
;  '(lambda ()
;     (local-set-key "\C-cd" 'flymake-display-err-menu-for-current-line)
;     (local-set-key "\C-cn" 'flymake-goto-next-error)
;     (local-set-key "\C-cp" 'flymake-goto-prev-error)
;     (flymake-jslint-load)
;))

;;;----------------------------------------
;;; flymake-eslint
;;;----------------------------------------

; Requires Emacs 26

;(unless (package-installed-p 'flymake-eslint)
;  (package-install 'flymake-eslint))

;(require 'flymake-eslint)
;(add-hook 'js-mode-hook
;  '(lambda ()
;     (local-set-key "\C-cd" 'flymake-display-err-menu-for-current-line)
;     (local-set-key "\C-cn" 'flymake-goto-next-error)
;     (local-set-key "\C-cp" 'flymake-goto-prev-error)
;     (flymake-eslint-enable)
;))

;;;----------------------------------------
;;; flymake shellcheck
;;;----------------------------------------

(defun flymake-shellcheck ()
  (flymake-compile-script-path "~/.local/bin/shellcheck"))

(add-hook 'sh-mode-hook
  '(lambda ()
     (local-set-key "\C-cd" 'flymake-display-err-menu-for-current-line)
     (local-set-key "\C-cn" 'flymake-goto-next-error)
     (local-set-key "\C-cp" 'flymake-goto-prev-error)

     ;; https://www.emacswiki.org/emacs/AutoModeAlist
     ;; Note that \' matches the end of a string, where as $ matches the empty string before a newline.
     ;; Thus, $ may lead to unexpected behavior when dealing with filenames containing newlines.

     ;; If \\' is used instead of $ this hook is applied to erlang-mode :\
     ;(add-to-list 'flymake-allowed-file-name-masks '(".+$" flymake-shellcheck))

     ;; should be the last.
     (flymake-mode 1)
))

;;;----------------------------------------
;;; web-mode
;;;----------------------------------------

(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.gv\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.dtl\\'" . web-mode))
(defun my-web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 4)

  (set-face-attribute 'web-mode-doctype-face nil :foreground "gray")
  (set-face-attribute 'web-mode-html-tag-face nil :foreground "blue")
  (set-face-attribute 'web-mode-html-attr-name-face nil :foreground "sienna")
  (set-face-attribute 'web-mode-html-tag-bracket-face nil :foreground "black")
  (set-face-attribute 'web-mode-html-attr-equal-face nil :foreground "black")
  (set-face-attribute 'web-mode-css-selector-face nil :foreground "blue")

;font-lock-keyword-face
;M-x list-colors-display

  (setq web-mode-engines-alist '(("django" . "\\.html\\'")
                                 ("django" . "\\.gv\\'")))
)
(add-hook 'web-mode-hook 'my-web-mode-hook)

;;;----------------------------------------
;;; cc-mode
;;;----------------------------------------
(setq c-default-style "linux")
(setq c-basic-offset 4)

;;;----------------------------------------
;;; org mode
;;;----------------------------------------

; C-c C-, - `org-insert-structure-template'
; Enable <s TAB back
(require 'org-tempo)

; Make `results' lower-case like `org-structure-template-alist'
(setq org-babel-results-keyword "results")

; Info:
; https://orgmode.org/worg/org-contrib/babel/languages/index.html

(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (awk      . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-awk.html
   (C        . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html
   (ditaa    . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-ditaa.html
   (dot      . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html
   (gnuplot  . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html
   (java     . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-java.html
   (js       . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-js.html
   (mscgen   . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-mscgen.html
   (plantuml . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-plantuml.html
   (python   . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html
   (shell    . t) ; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-shell.html
))

; TODO:
; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html
; https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-LaTeX.html

(setq org-startup-with-inline-images t)
(setq org-src-fontify-natively t)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

; execute code block outside org-mode. better to put in specific modes
(global-set-key (kbd "<f5>") 'org-babel-execute-src-block-maybe)
(global-set-key (kbd "<M-f5>") 'org-babel-execute-buffer)
(global-set-key (kbd "<ESC> <M-f5>")
                '(lambda ()
                   (interactive)
                   (setq org-confirm-babel-evaluate nil)
                   (org-babel-execute-buffer)
                   (setq org-confirm-babel-evaluate t)))

; (setq org-confirm-babel-evaluate nil)
(defun my-org-confirm-babel-evaluate (lang body)
  (not (member lang '("ditaa" "dot" "emacs-lisp" "mscgen" "plantuml")))) ; don't ask for...
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

(setq org-ditaa-jar-path    (expand-file-name "~/emacs/lib/java/ditaa-0.11.0-standalone.jar"))
(setq org-plantuml-jar-path (expand-file-name "~/emacs/lib/java/plantuml.1.2019.1.jar"))

; https://gist.github.com/mrspeaker/c3b7b8d0b0b96b1a012d736b22d12b2e
; https://www.mail-archive.com/emacs-orgmode@gnu.org/msg127137.html
(setq org-babel-js-function-wrapper
      "process.stdout.write(require('util').inspect(function(){\n%s\n}(), { maxArrayLength: null, maxStringLength: null, breakLength: Infinity, compact: true }))")

;;;----------------------------------------
;;; ask before closing emacs
;;;----------------------------------------

(defun ask-before-closing ()
  "Ask whether or not to close, and then close if y was pressed"
  (interactive)
  (if (y-or-n-p (format "Are you sure you want to exit Emacs? "))
      (save-buffers-kill-emacs)
      (message "Canceled exit")))

(global-set-key "\C-x\C-c" 'ask-before-closing)

;;;----------------------------------------
;;; open & read ~/.emacs
;;;----------------------------------------

(defun open-dot-emacs ()
  "Open ~/.emacs"
  (interactive)
  (find-file "~/.emacs"))

(defun read-dot-emacs ()
  "Read ~/.emacs"
  (interactive)
  (load-file "~/.emacs")
  (switch-to-buffer (current-buffer)))

(global-set-key "\C-c\C-e" 'open-dot-emacs)
(global-set-key "\C-c\C-r" 'read-dot-emacs)

;;;----------------------------------------
;;; backward kill line
;;;----------------------------------------

;; define the function to kill the characters from the cursor
;; to the beginning of the current line
(defun backward-kill-line (arg)
  "Kill the characters from the cursor to the beginning of the current line"
  (interactive "p")
  (kill-line 0))

; Conflicts with C-u 'universal-argument
;(global-set-key "\C-u" 'backward-kill-line)

;;;----------------------------------------
;;;
;;;----------------------------------------

(defun prettify-code ()
  "Remove spaces between the text and parentheses,
make sure there's a space between a semicolon and the
text after it"
  (interactive)
  (setq pairs '(
                ("\\([{[(]\\)\\s-+\\([^ ]\\)" . "\\1\\2") ; [{(space+char -> [{(char
                ; unfortunately I can't make }]) work as above
                ("\\([^ ]\\)\\s-+}" . "\\1}") ; charspace+} -> char}
                ("\\([^ ]\\)\\s-+]" . "\\1]") ; charspace+] -> char]
                ("\\([^ ]\\)\\s-+)" . "\\1)") ; charspace+) -> char)
                (",\\([^ ]\\)" . ", \\1") ; ,char -> ,spacechar
                ))
  (mapcar '(lambda (pair)
             (let ((from (car pair))
                   (to (cdr pair)))
               (beginning-of-buffer)
               (replace-regexp from to)))
          pairs)
  (beginning-of-buffer)
  (keyboard-quit))

;(while (re-search-forward "\\([0-9]+\\)\\." nil t)
;                        (replace-match "\\1,"))

;;;----------------------------------------
;;;
;;;----------------------------------------

(defun insert-caption (title)
  (interactive "sTitle: ")
  (insert "%% ===================================================================\n")
  (insert (format "%%%% %s\n" title))
  (insert "%% ===================================================================\n"))

(add-hook 'desktop-save-hook 'tramp-cleanup-all-buffers)
